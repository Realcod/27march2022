/*
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example,
the array nums = [0,1,2,4,5,6,7] might become:

    [4,5,6,7,0,1,2] if it was rotated 4 times.
    [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.
*/

#include<iostream>
using namespace std;

int minimumrot(int arr[],int n){
	int low=0,high=n-1;
	if(arr[low]<=arr[high])
		 return arr[low];
	while(low<=high){
		int mid=low+(high-low)/2;
		if(arr[mid]>arr[mid+1])
		   return arr[mid+1];
		else if(arr[mid]<arr[mid-1])
		   return arr[mid];
		else if(arr[low]<=arr[mid])
		   low=mid+1;
		else if(arr[mid]<=arr[high])
		   high=mid-1;
	}
	return -1;
}

int main(){
	int n,arr[100];
	cout<<"Enter the size of the array"<<endl;
	cin>>n;
	
	cout<<"Enter the elements in the array"<<endl;
	for(int i=0;i<n;i++){
       cin>>arr[i];
	}
	
	int min=minimumrot(arr,n);
	cout<<min;
}